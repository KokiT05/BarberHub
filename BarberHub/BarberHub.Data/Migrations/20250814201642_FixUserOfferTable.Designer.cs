// <auto-generated />
using System;
using BarberHub.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarberHub.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250814201642_FixUserOfferTable")]
    partial class FixUserOfferTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BarberHub.Data.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BarbershopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BarbershopId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("BarberHub.Data.Models.Barbershop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Barbershop Identifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Barbershop Address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Barbershop City");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time")
                        .HasComment("Barbershop closing time");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Barbershop Description");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasComment("Barbershop image url");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Show if barbershop is deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Barbershop Name");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time")
                        .HasComment("Barbershop opening time");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Barbershop Phone number");

                    b.HasKey("Id");

                    b.ToTable("Barbershops", t =>
                        {
                            t.HasComment("Barbershop in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("9c31e450-0fd6-4aa6-8d05-cd79b87ce656"),
                            Address = "бул. Ломско шосе",
                            City = "Sofia",
                            CloseTime = new TimeOnly(20, 30, 0),
                            Description = "Just a barbershop",
                            ImageUrl = "~/images/no-image.jpg",
                            IsDeleted = false,
                            Name = "The Brothers",
                            OpenTime = new TimeOnly(8, 30, 0),
                            PhoneNumber = "0881234567"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-7890-1234-567890abcdef"),
                            Address = "ул. Витоша 15",
                            City = "София",
                            CloseTime = new TimeOnly(18, 0, 0),
                            Description = "Традиционна бръснарница с модерен привкус.",
                            ImageUrl = "https://example.com/barbersden.jpg",
                            IsDeleted = false,
                            Name = "Barber's Den",
                            OpenTime = new TimeOnly(9, 0, 0),
                            PhoneNumber = "0887654321"
                        },
                        new
                        {
                            Id = new Guid("f6e5d4c3-b2a1-0987-6543-210fedcba987"),
                            Address = "бул. Свобода 10",
                            City = "Пловдив",
                            CloseTime = new TimeOnly(19, 0, 0),
                            Description = "Място, където стилът среща прецизността.",
                            ImageUrl = "https://example.com/clipjoint.png",
                            IsDeleted = false,
                            Name = "The Clip Joint",
                            OpenTime = new TimeOnly(10, 0, 0),
                            PhoneNumber = "0885126287"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-5e6f-7890-abcd-ef1234567890"),
                            Address = "ул. Княз Борис I 25",
                            City = "Варна",
                            CloseTime = new TimeOnly(17, 30, 0),
                            Description = "Ексклузивна бръснарница за истински господа.",
                            ImageUrl = "https://example.com/gentlemensquarters.webp",
                            IsDeleted = false,
                            Name = "Gentlemen's Quarters",
                            OpenTime = new TimeOnly(8, 30, 0),
                            PhoneNumber = "0881233361"
                        });
                });

            modelBuilder.Entity("BarberHub.Data.Models.Offer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Offer Identifier");

                    b.Property<Guid>("BarbershopId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("FK describe relation between Barbershop and Offer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Offer Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Offer Name");

                    b.Property<decimal>("Price")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasComment("Offer Price");

                    b.HasKey("Id");

                    b.HasIndex("BarbershopId");

                    b.ToTable("Offers", t =>
                        {
                            t.HasComment("Offer in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("99242240-c9e9-42ff-8414-8536eb740c84"),
                            BarbershopId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Минаване с машина за подстригване по цялата глава с един номер",
                            Name = "Подстригване с един номер",
                            Price = 5m
                        },
                        new
                        {
                            Id = new Guid("6582820a-79c5-4ecf-853d-544b64f528ed"),
                            BarbershopId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Оформяне на вежди",
                            Name = "Оформяне на вежди",
                            Price = 2m
                        },
                        new
                        {
                            Id = new Guid("0d4de42a-f4b0-4e1a-a6ee-9df1ead44ff6"),
                            BarbershopId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Добре оформена брада с бръснач",
                            Name = "Оформяне на брада",
                            Price = 3m
                        });
                });

            modelBuilder.Entity("BarberHub.Data.Models.UserOffer", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key reference to the user");

                    b.Property<Guid>("OfferId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key reference to the offer");

                    b.Property<DateTime>("SelectedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2025, 8, 14, 23, 16, 41, 925, DateTimeKind.Local).AddTicks(750))
                        .HasComment("Date and time when the offer was selected");

                    b.HasKey("UserId", "OfferId");

                    b.HasIndex("OfferId");

                    b.ToTable("UserOffers", t =>
                        {
                            t.HasComment("Represents a selected offer by a user");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BarberHub.Data.Models.Appointment", b =>
                {
                    b.HasOne("BarberHub.Data.Models.Barbershop", "Barbershop")
                        .WithMany("Appointments")
                        .HasForeignKey("BarbershopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbershop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberHub.Data.Models.Offer", b =>
                {
                    b.HasOne("BarberHub.Data.Models.Barbershop", "Barbershop")
                        .WithMany("Offers")
                        .HasForeignKey("BarbershopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barbershop");
                });

            modelBuilder.Entity("BarberHub.Data.Models.UserOffer", b =>
                {
                    b.HasOne("BarberHub.Data.Models.Offer", "Offer")
                        .WithMany("UserOffers")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BarberHub.Data.Models.Barbershop", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Offers");
                });

            modelBuilder.Entity("BarberHub.Data.Models.Offer", b =>
                {
                    b.Navigation("UserOffers");
                });
#pragma warning restore 612, 618
        }
    }
}
